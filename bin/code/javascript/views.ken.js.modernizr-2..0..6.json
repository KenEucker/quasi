{
  "code": "/*!\n * Modernizr v2.0.6\n * http://www.modernizr.com\n *\n * Copyright (c) 2009-2011 Faruk Ates, Paul Irish, Alex Sexton\n * Dual-licensed under the BSD or MIT licenses: www.modernizr.com/license/\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in\n * the current UA and makes the results available to you in two ways:\n * as properties on a global Modernizr object, and as classes on the\n * <html> element. This information allows you to progressively enhance\n * your pages with a granular level of control over the experience.\n *\n * Modernizr has an optional (not included) conditional resource loader\n * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n * To get a build that includes Modernizr.load(), as well as choosing\n * which tests to include, go to www.modernizr.com/download/\n *\n * Authors        Faruk Ates, Paul Irish, Alex Sexton, \n * Contributors   Ryan Seddon, Ben Alman\n */\n\nwindow.Modernizr = (function( window, document, undefined ) {\n\n    var version = '2.0.6',\n\n    Modernizr = {},\n    \n    // option for enabling the HTML classes to be added\n    enableClasses = true,\n\n    docElement = document.documentElement,\n    docHead = document.head || document.getElementsByTagName('head')[0],\n\n    /**\n     * Create our \"modernizr\" element that we do most feature tests on.\n     */\n    mod = 'modernizr',\n    modElem = document.createElement(mod),\n    mStyle = modElem.style,\n\n    /**\n     * Create the input element for various Web Forms feature tests.\n     */\n    inputElem = document.createElement('input'),\n\n    smile = ':)',\n\n    toString = Object.prototype.toString,\n\n    // List of property values to set for css tests. See ticket #21\n    prefixes = ' -webkit- -moz- -o- -ms- -khtml- '.split(' '),\n\n    // Following spec is to expose vendor-specific style properties as:\n    //   elem.style.WebkitBorderRadius\n    // and the following would be incorrect:\n    //   elem.style.webkitBorderRadius\n\n    // Webkit ghosts their properties in lowercase but Opera & Moz do not.\n    // Microsoft foregoes prefixes entirely <= IE8, but appears to\n    //   use a lowercase `ms` instead of the correct `Ms` in IE9\n\n    // More here: http://github.com/Modernizr/Modernizr/issues/issue/21\n    domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),\n\n    ns = {'svg': 'http://www.w3.org/2000/svg'},\n\n    tests = {},\n    inputs = {},\n    attrs = {},\n\n    classes = [],\n\n    featureName, // used in testing loop\n\n\n    // Inject element with style element and some CSS rules\n    injectElementWithStyles = function( rule, callback, nodes, testnames ) {\n\n      var style, ret, node,\n          div = document.createElement('div');\n\n      if ( parseInt(nodes, 10) ) {\n          // In order not to give false positives we create a node for each test\n          // This also allows the method to scale for unspecified uses\n          while ( nodes-- ) {\n              node = document.createElement('div');\n              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n              div.appendChild(node);\n          }\n      }\n\n      // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed\n      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element\n      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.\n      // http://msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx\n      style = ['&shy;', '<style>', rule, '</style>'].join('');\n      div.id = mod;\n      div.innerHTML += style;\n      docElement.appendChild(div);\n\n      ret = callback(div, rule);\n      div.parentNode.removeChild(div);\n\n      return !!ret;\n\n    },\n\n\n    // adapted from matchMedia polyfill\n    // by Scott Jehl and Paul Irish\n    // gist.github.com/786768\n    testMediaQuery = function( mq ) {\n\n      if ( window.matchMedia ) {\n        return matchMedia(mq).matches;\n      }\n\n      var bool;\n\n      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {\n        bool = (window.getComputedStyle ?\n                  getComputedStyle(node, null) :\n                  node.currentStyle)['position'] == 'absolute';\n      });\n\n      return bool;\n\n     },\n\n\n    /**\n      * isEventSupported determines if a given element supports the given event\n      * function from http://yura.thinkweb2.com/isEventSupported/\n      */\n    isEventSupported = (function() {\n\n      var TAGNAMES = {\n        'select': 'input', 'change': 'input',\n        'submit': 'form', 'reset': 'form',\n        'error': 'img', 'load': 'img', 'abort': 'img'\n      };\n\n      function isEventSupported( eventName, element ) {\n\n        element = element || document.createElement(TAGNAMES[eventName] || 'div');\n        eventName = 'on' + eventName;\n\n        // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and \"resize\", whereas `in` \"catches\" those\n        var isSupported = eventName in element;\n\n        if ( !isSupported ) {\n          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element\n          if ( !element.setAttribute ) {\n            element = document.createElement('div');\n          }\n          if ( element.setAttribute && element.removeAttribute ) {\n            element.setAttribute(eventName, '');\n            isSupported = is(element[eventName], 'function');\n\n            // If property was created, \"remove it\" (by setting value to `undefined`)\n            if ( !is(element[eventName], undefined) ) {\n              element[eventName] = undefined;\n            }\n            element.removeAttribute(eventName);\n          }\n        }\n\n        element = null;\n        return isSupported;\n      }\n      return isEventSupported;\n    })();\n\n    // hasOwnProperty shim by kangax needed for Safari 2.0 support\n    var _hasOwnProperty = ({}).hasOwnProperty, hasOwnProperty;\n    if ( !is(_hasOwnProperty, undefined) && !is(_hasOwnProperty.call, undefined) ) {\n      hasOwnProperty = function (object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    }\n    else {\n      hasOwnProperty = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], undefined));\n      };\n    }\n\n    /**\n     * setCss applies given styles to the Modernizr DOM node.\n     */\n    function setCss( str ) {\n        mStyle.cssText = str;\n    }\n\n    /**\n     * setCssAll extrapolates all vendor-specific css strings.\n     */\n    function setCssAll( str1, str2 ) {\n        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));\n    }\n\n    /**\n     * is returns a boolean for if typeof obj is exactly type.\n     */\n    function is( obj, type ) {\n        return typeof obj === type;\n    }\n\n    /**\n     * contains returns a boolean for if substr is found within str.\n     */\n    function contains( str, substr ) {\n        return !!~('' + str).indexOf(substr);\n    }\n\n    /**\n     * testProps is a generic CSS / DOM property test; if a browser supports\n     *   a certain property, it won't return undefined for it.\n     *   A supported CSS property returns empty string when its not yet set.\n     */\n    function testProps( props, prefixed ) {\n        for ( var i in props ) {\n            if ( mStyle[ props[i] ] !== undefined ) {\n                return prefixed == 'pfx' ? props[i] : true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * testPropsAll tests a list of DOM properties we want to check against.\n     *   We specify literally ALL possible (known and/or likely) properties on\n     *   the element including the non-vendor prefixed one, for forward-\n     *   compatibility.\n     */\n    function testPropsAll( prop, prefixed ) {\n\n        var ucProp  = prop.charAt(0).toUpperCase() + prop.substr(1),\n            props   = (prop + ' ' + domPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n        return testProps(props, prefixed);\n    }\n\n    /**\n     * testBundle tests a list of CSS features that require element and style injection.\n     *   By bundling them together we can reduce the need to touch the DOM multiple times.\n     */\n    /*>>testBundle*/\n    var testBundle = (function( styles, tests ) {\n        var style = styles.join(''),\n            len = tests.length;\n\n        injectElementWithStyles(style, function( node, rule ) {\n            var style = document.styleSheets[document.styleSheets.length - 1],\n                // IE8 will bork if you create a custom build that excludes both fontface and generatedcontent tests.\n                // So we check for cssRules and that there is a rule available\n                // More here: https://github.com/Modernizr/Modernizr/issues/288 & https://github.com/Modernizr/Modernizr/issues/293\n                cssText = style.cssRules && style.cssRules[0] ? style.cssRules[0].cssText : style.cssText || \"\",\n                children = node.childNodes, hash = {};\n\n            while ( len-- ) {\n                hash[children[len].id] = children[len];\n            }\n\n            /*>>touch*/           Modernizr['touch'] = ('ontouchstart' in window) || hash['touch'].offsetTop === 9; /*>>touch*/\n            /*>>csstransforms3d*/ Modernizr['csstransforms3d'] = hash['csstransforms3d'].offsetLeft === 9;          /*>>csstransforms3d*/\n            /*>>generatedcontent*/Modernizr['generatedcontent'] = hash['generatedcontent'].offsetHeight >= 1;       /*>>generatedcontent*/\n            /*>>fontface*/        Modernizr['fontface'] = /src/i.test(cssText) &&\n                                                                  cssText.indexOf(rule.split(' ')[0]) === 0;        /*>>fontface*/\n        }, len, tests);\n\n    })([\n        // Pass in styles to be injected into document\n        /*>>fontface*/        '@font-face {font-family:\"font\";src:url(\"https://\")}'         /*>>fontface*/\n        \n        /*>>touch*/           ,['@media (',prefixes.join('touch-enabled),('),mod,')',\n                                '{#touch{top:9px;position:absolute}}'].join('')           /*>>touch*/\n                                \n        /*>>csstransforms3d*/ ,['@media (',prefixes.join('transform-3d),('),mod,')',\n                                '{#csstransforms3d{left:9px;position:absolute}}'].join('')/*>>csstransforms3d*/\n                                \n        /*>>generatedcontent*/,['#generatedcontent:after{content:\"',smile,'\";visibility:hidden}'].join('')  /*>>generatedcontent*/\n    ],\n      [\n        /*>>fontface*/        'fontface'          /*>>fontface*/\n        /*>>touch*/           ,'touch'            /*>>touch*/\n        /*>>csstransforms3d*/ ,'csstransforms3d'  /*>>csstransforms3d*/\n        /*>>generatedcontent*/,'generatedcontent' /*>>generatedcontent*/\n        \n    ]);/*>>testBundle*/\n\n\n    /**\n     * Tests\n     * -----\n     */\n\n    tests['flexbox'] = function() {\n        /**\n         * setPrefixedValueCSS sets the property of a specified element\n         * adding vendor prefixes to the VALUE of the property.\n         * @param {Element} element\n         * @param {string} property The property name. This will not be prefixed.\n         * @param {string} value The value of the property. This WILL be prefixed.\n         * @param {string=} extra Additional CSS to append unmodified to the end of\n         * the CSS string.\n         */\n        function setPrefixedValueCSS( element, property, value, extra ) {\n            property += ':';\n            element.style.cssText = (property + prefixes.join(value + ';' + property)).slice(0, -property.length) + (extra || '');\n        }\n\n        /**\n         * setPrefixedPropertyCSS sets the property of a specified element\n         * adding vendor prefixes to the NAME of the property.\n         * @param {Element} element\n         * @param {string} property The property name. This WILL be prefixed.\n         * @param {string} value The value of the property. This will not be prefixed.\n         * @param {string=} extra Additional CSS to append unmodified to the end of\n         * the CSS string.\n         */\n        function setPrefixedPropertyCSS( element, property, value, extra ) {\n            element.style.cssText = prefixes.join(property + ':' + value + ';') + (extra || '');\n        }\n\n        var c = document.createElement('div'),\n            elem = document.createElement('div');\n\n        setPrefixedValueCSS(c, 'display', 'box', 'width:42px;padding:0;');\n        setPrefixedPropertyCSS(elem, 'box-flex', '1', 'width:10px;');\n\n        c.appendChild(elem);\n        docElement.appendChild(c);\n\n        var ret = elem.offsetWidth === 42;\n\n        c.removeChild(elem);\n        docElement.removeChild(c);\n\n        return ret;\n    };\n\n    // On the S60 and BB Storm, getContext exists, but always returns undefined\n    // http://github.com/Modernizr/Modernizr/issues/issue/97/\n\n    tests['canvas'] = function() {\n        var elem = document.createElement('canvas');\n        return !!(elem.getContext && elem.getContext('2d'));\n    };\n\n    tests['canvastext'] = function() {\n        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));\n    };\n\n    // This WebGL test may false positive. \n    // But really it's quite impossible to know whether webgl will succeed until after you create the context. \n    // You might have hardware that can support a 100x100 webgl canvas, but will not support a 1000x1000 webgl \n    // canvas. So this feature inference is weak, but intentionally so.\n    \n    // It is known to false positive in FF4 with certain hardware and the iPad 2.\n    \n    tests['webgl'] = function() {\n        return !!window.WebGLRenderingContext;\n    };\n\n    /*\n     * The Modernizr.touch test only indicates if the browser supports\n     *    touch events, which does not necessarily reflect a touchscreen\n     *    device, as evidenced by tablets running Windows 7 or, alas,\n     *    the Palm Pre / WebOS (touch) phones.\n     *\n     * Additionally, Chrome (desktop) used to lie about its support on this,\n     *    but that has since been rectified: http://crbug.com/36415\n     *\n     * We also test for Firefox 4 Multitouch Support.\n     *\n     * For more info, see: http://modernizr.github.com/Modernizr/touch.html\n     */\n\n    tests['touch'] = function() {\n        return Modernizr['touch'];\n    };\n\n    /**\n     * geolocation tests for the new Geolocation API specification.\n     *   This test is a standards compliant-only test; for more complete\n     *   testing, including a Google Gears fallback, please see:\n     *   http://code.google.com/p/geo-location-javascript/\n     * or view a fallback solution using google's geo API:\n     *   http://gist.github.com/366184\n     */\n    tests['geolocation'] = function() {\n        return !!navigator.geolocation;\n    };\n\n    // Per 1.6:\n    // This used to be Modernizr.crosswindowmessaging but the longer\n    // name has been deprecated in favor of a shorter and property-matching one.\n    // The old API is still available in 1.6, but as of 2.0 will throw a warning,\n    // and in the first release thereafter disappear entirely.\n    tests['postmessage'] = function() {\n      return !!window.postMessage;\n    };\n\n    // Web SQL database detection is tricky:\n\n    // In chrome incognito mode, openDatabase is truthy, but using it will\n    //   throw an exception: http://crbug.com/42380\n    // We can create a dummy database, but there is no way to delete it afterwards.\n\n    // Meanwhile, Safari users can get prompted on any database creation.\n    //   If they do, any page with Modernizr will give them a prompt:\n    //   http://github.com/Modernizr/Modernizr/issues/closed#issue/113\n\n    // We have chosen to allow the Chrome incognito false positive, so that Modernizr\n    //   doesn't litter the web with these test databases. As a developer, you'll have\n    //   to account for this gotcha yourself.\n    tests['websqldatabase'] = function() {\n      var result = !!window.openDatabase;\n      /*  if (result){\n            try {\n              result = !!openDatabase( mod + \"testdb\", \"1.0\", mod + \"testdb\", 2e4);\n            } catch(e) {\n            }\n          }  */\n      return result;\n    };\n\n    // Vendors had inconsistent prefixing with the experimental Indexed DB:\n    // - Webkit's implementation is accessible through webkitIndexedDB\n    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB\n    // For speed, we don't test the legacy (and beta-only) indexedDB\n    tests['indexedDB'] = function() {\n      for ( var i = -1, len = domPrefixes.length; ++i < len; ){\n        if ( window[domPrefixes[i].toLowerCase() + 'IndexedDB'] ){\n          return true;\n        }\n      }\n      return !!window.indexedDB;\n    };\n\n    // documentMode logic from YUI to filter out IE8 Compat Mode\n    //   which false positives.\n    tests['hashchange'] = function() {\n      return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);\n    };\n\n    // Per 1.6:\n    // This used to be Modernizr.historymanagement but the longer\n    // name has been deprecated in favor of a shorter and property-matching one.\n    // The old API is still available in 1.6, but as of 2.0 will throw a warning,\n    // and in the first release thereafter disappear entirely.\n    tests['history'] = function() {\n      return !!(window.history && history.pushState);\n    };\n\n    tests['draganddrop'] = function() {\n        return isEventSupported('dragstart') && isEventSupported('drop');\n    };\n\n    // Mozilla is targeting to land MozWebSocket for FF6\n    // bugzil.la/659324\n    tests['websockets'] = function() {\n        for ( var i = -1, len = domPrefixes.length; ++i < len; ){\n          if ( window[domPrefixes[i] + 'WebSocket'] ){\n            return true;\n          }\n        }\n        return 'WebSocket' in window;\n    };\n\n\n    // http://css-tricks.com/rgba-browser-support/\n    tests['rgba'] = function() {\n        // Set an rgba() color and check the returned value\n\n        setCss('background-color:rgba(150,255,150,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba');\n    };\n\n    tests['hsla'] = function() {\n        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,\n        //   except IE9 who retains it as hsla\n\n        setCss('background-color:hsla(120,40%,100%,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');\n    };\n\n    tests['multiplebgs'] = function() {\n        // Setting multiple images AND a color on the background shorthand property\n        //  and then querying the style.background property value for the number of\n        //  occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!\n\n        setCss('background:url(https://),url(https://),red url(https://)');\n\n        // If the UA supports multiple backgrounds, there should be three occurrences\n        //   of the string \"url(\" in the return value for elemStyle.background\n\n        return /(url\\s*\\(.*?){3}/.test(mStyle.background);\n    };\n\n\n    // In testing support for a given CSS property, it's legit to test:\n    //    `elem.style[styleName] !== undefined`\n    // If the property is supported it will return an empty string,\n    // if unsupported it will return undefined.\n\n    // We'll take advantage of this quick test and skip setting a style\n    // on our modernizr element, but instead just testing undefined vs\n    // empty string.\n\n\n    tests['backgroundsize'] = function() {\n        return testPropsAll('backgroundSize');\n    };\n\n    tests['borderimage'] = function() {\n        return testPropsAll('borderImage');\n    };\n\n\n    // Super comprehensive table about all the unique implementations of\n    // border-radius: http://muddledramblings.com/table-of-css3-border-radius-compliance\n\n    tests['borderradius'] = function() {\n        return testPropsAll('borderRadius');\n    };\n\n    // WebOS unfortunately false positives on this test.\n    tests['boxshadow'] = function() {\n        return testPropsAll('boxShadow');\n    };\n\n    // FF3.0 will false positive on this test\n    tests['textshadow'] = function() {\n        return document.createElement('div').style.textShadow === '';\n    };\n\n\n    tests['opacity'] = function() {\n        // Browsers that actually have CSS Opacity implemented have done so\n        //  according to spec, which means their return values are within the\n        //  range of [0.0,1.0] - including the leading zero.\n\n        setCssAll('opacity:.55');\n\n        // The non-literal . in this regex is intentional:\n        //   German Chrome returns this value as 0,55\n        // https://github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632\n        return /^0.55$/.test(mStyle.opacity);\n    };\n\n\n    tests['cssanimations'] = function() {\n        return testPropsAll('animationName');\n    };\n\n\n    tests['csscolumns'] = function() {\n        return testPropsAll('columnCount');\n    };\n\n\n    tests['cssgradients'] = function() {\n        /**\n         * For CSS Gradients syntax, please see:\n         * http://webkit.org/blog/175/introducing-css-gradients/\n         * https://developer.mozilla.org/en/CSS/-moz-linear-gradient\n         * https://developer.mozilla.org/en/CSS/-moz-radial-gradient\n         * http://dev.w3.org/csswg/css3-images/#gradients-\n         */\n\n        var str1 = 'background-image:',\n            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',\n            str3 = 'linear-gradient(left top,#9f9, white);';\n\n        setCss(\n            (str1 + prefixes.join(str2 + str1) + prefixes.join(str3 + str1)).slice(0, -str1.length)\n        );\n\n        return contains(mStyle.backgroundImage, 'gradient');\n    };\n\n\n    tests['cssreflections'] = function() {\n        return testPropsAll('boxReflect');\n    };\n\n\n    tests['csstransforms'] = function() {\n        return !!testProps(['transformProperty', 'WebkitTransform', 'MozTransform', 'OTransform', 'msTransform']);\n    };\n\n\n    tests['csstransforms3d'] = function() {\n\n        var ret = !!testProps(['perspectiveProperty', 'WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective']);\n\n        // Webkit’s 3D transforms are passed off to the browser's own graphics renderer.\n        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n        //   some conditions. As a result, Webkit typically recognizes the syntax but\n        //   will sometimes throw a false positive, thus we must do a more thorough check:\n        if ( ret && 'webkitPerspective' in docElement.style ) {\n\n          // Webkit allows this media query to succeed only if the feature is enabled.\n          // `@media (transform-3d),(-o-transform-3d),(-moz-transform-3d),(-ms-transform-3d),(-webkit-transform-3d),(modernizr){ ... }`\n          ret = Modernizr['csstransforms3d'];\n        }\n        return ret;\n    };\n\n\n    tests['csstransitions'] = function() {\n        return testPropsAll('transitionProperty');\n    };\n\n\n    /*>>fontface*/\n    // @font-face detection routine by Diego Perini\n    // http://javascript.nwbox.com/CSSSupport/\n    tests['fontface'] = function() {\n        return Modernizr['fontface'];\n    };\n    /*>>fontface*/\n\n    // CSS generated content detection\n    tests['generatedcontent'] = function() {\n        return Modernizr['generatedcontent'];\n    };\n\n\n\n    // These tests evaluate support of the video/audio elements, as well as\n    // testing what types of content they support.\n    //\n    // We're using the Boolean constructor here, so that we can extend the value\n    // e.g.  Modernizr.video     // true\n    //       Modernizr.video.ogg // 'probably'\n    //\n    // Codec values from : http://github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n    //                     thx to NielsLeenheer and zcorpan\n\n    // Note: in FF 3.5.1 and 3.5.0, \"no\" was a return value instead of empty string.\n    //   Modernizr does not normalize for that.\n\n    tests['video'] = function() {\n        var elem = document.createElement('video'),\n            bool = false;\n            \n        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('video/ogg; codecs=\"theora\"');\n\n                // Workaround required for IE9, which doesn't report video support without audio codec specified.\n                //   bug 599718 @ msft connect\n                var h264 = 'video/mp4; codecs=\"avc1.42E01E';\n                bool.h264 = elem.canPlayType(h264 + '\"') || elem.canPlayType(h264 + ', mp4a.40.2\"');\n\n                bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"');\n            }\n            \n        } catch(e) { }\n        \n        return bool;\n    };\n\n    tests['audio'] = function() {\n        var elem = document.createElement('audio'),\n            bool = false;\n\n        try { \n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"');\n                bool.mp3  = elem.canPlayType('audio/mpeg;');\n\n                // Mimetypes accepted:\n                //   https://developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n                //   http://bit.ly/iphoneoscodecs\n                bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"');\n                bool.m4a  = elem.canPlayType('audio/x-m4a;') || elem.canPlayType('audio/aac;');\n            }\n        } catch(e) { }\n        \n        return bool;\n    };\n\n\n    // Firefox has made these tests rather unfun.\n\n    // In FF4, if disabled, window.localStorage should === null.\n\n    // Normally, we could not test that directly and need to do a\n    //   `('localStorage' in window) && ` test first because otherwise Firefox will\n    //   throw http://bugzil.la/365772 if cookies are disabled\n\n    // However, in Firefox 4 betas, if dom.storage.enabled == false, just mentioning\n    //   the property will throw an exception. http://bugzil.la/599479\n    // This looks to be fixed for FF4 Final.\n\n    // Because we are forced to try/catch this, we'll go aggressive.\n\n    // FWIW: IE8 Compat mode supports these features completely:\n    //   http://www.quirksmode.org/dom/html5.html\n    // But IE8 doesn't support either with local files\n\n    tests['localstorage'] = function() {\n        try {\n            return !!localStorage.getItem;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    tests['sessionstorage'] = function() {\n        try {\n            return !!sessionStorage.getItem;\n        } catch(e){\n            return false;\n        }\n    };\n\n\n    tests['webworkers'] = function() {\n        return !!window.Worker;\n    };\n\n\n    tests['applicationcache'] = function() {\n        return !!window.applicationCache;\n    };\n\n\n    // Thanks to Erik Dahlstrom\n    tests['svg'] = function() {\n        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;\n    };\n\n    // specifically for SVG inline in HTML, not within XHTML\n    // test page: paulirish.com/demo/inline-svg\n    tests['inlinesvg'] = function() {\n      var div = document.createElement('div');\n      div.innerHTML = '<svg/>';\n      return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;\n    };\n\n    // Thanks to F1lt3r and lucideer, ticket #35\n    tests['smil'] = function() {\n        return !!document.createElementNS && /SVG/.test(toString.call(document.createElementNS(ns.svg, 'animate')));\n    };\n\n    tests['svgclippaths'] = function() {\n        // Possibly returns a false positive in Safari 3.2?\n        return !!document.createElementNS && /SVG/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));\n    };\n\n    // input features and input types go directly onto the ret object, bypassing the tests loop.\n    // Hold this guy to execute in a moment.\n    function webforms() {\n        // Run through HTML5's new input attributes to see if the UA understands any.\n        // We're using f which is the <input> element created early on\n        // Mike Taylr has created a comprehensive resource for testing these attributes\n        //   when applied to all input types:\n        //   http://miketaylr.com/code/input-type-attr.html\n        // spec: http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n        \n        // Only input placeholder is tested while textarea's placeholder is not. \n        // Currently Safari 4 and Opera 11 have support only for the input placeholder\n        // Both tests are available in feature-detects/forms-placeholder.js\n        Modernizr['input'] = (function( props ) {\n            for ( var i = 0, len = props.length; i < len; i++ ) {\n                attrs[ props[i] ] = !!(props[i] in inputElem);\n            }\n            return attrs;\n        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));\n\n        // Run through HTML5's new input types to see if the UA understands any.\n        //   This is put behind the tests runloop because it doesn't return a\n        //   true/false like all the other tests; instead, it returns an object\n        //   containing each input type with its corresponding true/false value\n\n        // Big thanks to @miketaylr for the html5 forms expertise. http://miketaylr.com/\n        Modernizr['inputtypes'] = (function(props) {\n\n            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {\n\n                inputElem.setAttribute('type', inputElemType = props[i]);\n                bool = inputElem.type !== 'text';\n\n                // We first check to see if the type we give it sticks..\n                // If the type does, we feed it a textual value, which shouldn't be valid.\n                // If the value doesn't stick, we know there's input sanitization which infers a custom UI\n                if ( bool ) {\n\n                    inputElem.value         = smile;\n                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';\n\n                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {\n\n                      docElement.appendChild(inputElem);\n                      defaultView = document.defaultView;\n\n                      // Safari 2-4 allows the smiley as a value, despite making a slider\n                      bool =  defaultView.getComputedStyle &&\n                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&\n                              // Mobile android web browser has false positive, so must\n                              // check the height to see if the widget is actually there.\n                              (inputElem.offsetHeight !== 0);\n\n                      docElement.removeChild(inputElem);\n\n                    } else if ( /^(search|tel)$/.test(inputElemType) ){\n                      // Spec doesnt define any special parsing or detectable UI\n                      //   behaviors so we pass these through as true\n\n                      // Interestingly, opera fails the earlier test, so it doesn't\n                      //  even make it here.\n\n                    } else if ( /^(url|email)$/.test(inputElemType) ) {\n                      // Real url and email support comes with prebaked validation.\n                      bool = inputElem.checkValidity && inputElem.checkValidity() === false;\n\n                    } else if ( /^color$/.test(inputElemType) ) {\n                        // chuck into DOM and force reflow for Opera bug in 11.00\n                        // github.com/Modernizr/Modernizr/issues#issue/159\n                        docElement.appendChild(inputElem);\n                        docElement.offsetWidth;\n                        bool = inputElem.value != smile;\n                        docElement.removeChild(inputElem);\n\n                    } else {\n                      // If the upgraded input compontent rejects the :) text, we got a winner\n                      bool = inputElem.value != smile;\n                    }\n                }\n\n                inputs[ props[i] ] = !!bool;\n            }\n            return inputs;\n        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));\n    }\n\n\n    // End of test definitions\n    // -----------------------\n\n\n\n    // Run through all tests and detect their support in the current UA.\n    // todo: hypothetically we could be doing an array of tests and use a basic loop here.\n    for ( var feature in tests ) {\n        if ( hasOwnProperty(tests, feature) ) {\n            // run the test, throw the return value into the Modernizr,\n            //   then based on that boolean, define an appropriate className\n            //   and push it into an array of classes we'll join later.\n            featureName  = feature.toLowerCase();\n            Modernizr[featureName] = tests[feature]();\n\n            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);\n        }\n    }\n\n    // input tests need to run.\n    Modernizr.input || webforms();\n\n\n    /**\n     * addTest allows the user to define their own feature tests\n     * the result will be added onto the Modernizr object,\n     * as well as an appropriate className set on the html element\n     *\n     * @param feature - String naming the feature\n     * @param test - Function returning true if feature is supported, false if not\n     */\n     Modernizr.addTest = function ( feature, test ) {\n       if ( typeof feature == \"object\" ) {\n         for ( var key in feature ) {\n           if ( hasOwnProperty( feature, key ) ) { \n             Modernizr.addTest( key, feature[ key ] );\n           }\n         }\n       } else {\n\n         feature = feature.toLowerCase();\n\n         if ( Modernizr[feature] !== undefined ) {\n           // we're going to quit if you're trying to overwrite an existing test\n           // if we were to allow it, we'd do this:\n           //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");  \n           //   docElement.className = docElement.className.replace( re, '' );\n           // but, no rly, stuff 'em.\n           return; \n         }\n\n         test = typeof test == \"boolean\" ? test : !!test();\n\n         docElement.className += ' ' + (test ? '' : 'no-') + feature;\n         Modernizr[feature] = test;\n\n       }\n\n       return Modernizr; // allow chaining.\n     };\n    \n\n    // Reset modElem.cssText to nothing to reduce memory footprint.\n    setCss('');\n    modElem = inputElem = null;\n\n    //>>BEGIN IEPP\n    // Enable HTML 5 elements for styling (and printing) in IE.\n    if ( window.attachEvent && (function(){ var elem = document.createElement('div');\n                                            elem.innerHTML = '<elem></elem>';\n                                            return elem.childNodes.length !== 1; })() ) {\n                                              \n        // iepp v2 by @jon_neal & afarkas : github.com/aFarkas/iepp/\n        (function(win, doc) {\n          win.iepp = win.iepp || {};\n          var iepp = win.iepp,\n            elems = iepp.html5elements || 'abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video',\n            elemsArr = elems.split('|'),\n            elemsArrLen = elemsArr.length,\n            elemRegExp = new RegExp('(^|\\\\s)('+elems+')', 'gi'),\n            tagRegExp = new RegExp('<(\\/*)('+elems+')', 'gi'),\n            filterReg = /^\\s*[\\{\\}]\\s*$/,\n            ruleRegExp = new RegExp('(^|[^\\\\n]*?\\\\s)('+elems+')([^\\\\n]*)({[\\\\n\\\\w\\\\W]*?})', 'gi'),\n            docFrag = doc.createDocumentFragment(),\n            html = doc.documentElement,\n            head = html.firstChild,\n            bodyElem = doc.createElement('body'),\n            styleElem = doc.createElement('style'),\n            printMedias = /print|all/,\n            body;\n          function shim(doc) {\n            var a = -1;\n            while (++a < elemsArrLen)\n              // Use createElement so IE allows HTML5-named elements in a document\n              doc.createElement(elemsArr[a]);\n          }\n\n          iepp.getCSS = function(styleSheetList, mediaType) {\n            if(styleSheetList+'' === undefined){return '';}\n            var a = -1,\n              len = styleSheetList.length,\n              styleSheet,\n              cssTextArr = [];\n            while (++a < len) {\n              styleSheet = styleSheetList[a];\n              //currently no test for disabled/alternate stylesheets\n              if(styleSheet.disabled){continue;}\n              mediaType = styleSheet.media || mediaType;\n              // Get css from all non-screen stylesheets and their imports\n              if (printMedias.test(mediaType)) cssTextArr.push(iepp.getCSS(styleSheet.imports, mediaType), styleSheet.cssText);\n              //reset mediaType to all with every new *not imported* stylesheet\n              mediaType = 'all';\n            }\n            return cssTextArr.join('');\n          };\n\n          iepp.parseCSS = function(cssText) {\n            var cssTextArr = [],\n              rule;\n            while ((rule = ruleRegExp.exec(cssText)) != null){\n              // Replace all html5 element references with iepp substitute classnames\n              cssTextArr.push(( (filterReg.exec(rule[1]) ? '\\n' : rule[1]) +rule[2]+rule[3]).replace(elemRegExp, '$1.iepp_$2')+rule[4]);\n            }\n            return cssTextArr.join('\\n');\n          };\n\n          iepp.writeHTML = function() {\n            var a = -1;\n            body = body || doc.body;\n            while (++a < elemsArrLen) {\n              var nodeList = doc.getElementsByTagName(elemsArr[a]),\n                nodeListLen = nodeList.length,\n                b = -1;\n              while (++b < nodeListLen)\n                if (nodeList[b].className.indexOf('iepp_') < 0)\n                  // Append iepp substitute classnames to all html5 elements\n                  nodeList[b].className += ' iepp_'+elemsArr[a];\n            }\n            docFrag.appendChild(body);\n            html.appendChild(bodyElem);\n            // Write iepp substitute print-safe document\n            bodyElem.className = body.className;\n            bodyElem.id = body.id;\n            // Replace HTML5 elements with <font> which is print-safe and shouldn't conflict since it isn't part of html5\n            bodyElem.innerHTML = body.innerHTML.replace(tagRegExp, '<$1font');\n          };\n\n\n          iepp._beforePrint = function() {\n            // Write iepp custom print CSS\n            styleElem.styleSheet.cssText = iepp.parseCSS(iepp.getCSS(doc.styleSheets, 'all'));\n            iepp.writeHTML();\n          };\n\n          iepp.restoreHTML = function(){\n            // Undo everything done in onbeforeprint\n            bodyElem.innerHTML = '';\n            html.removeChild(bodyElem);\n            html.appendChild(body);\n          };\n\n          iepp._afterPrint = function(){\n            // Undo everything done in onbeforeprint\n            iepp.restoreHTML();\n            styleElem.styleSheet.cssText = '';\n          };\n\n\n\n          // Shim the document and iepp fragment\n          shim(doc);\n          shim(docFrag);\n\n          //\n          if(iepp.disablePP){return;}\n\n          // Add iepp custom print style element\n          head.insertBefore(styleElem, head.firstChild);\n          styleElem.media = 'print';\n          styleElem.className = 'iepp-printshim';\n          win.attachEvent(\n            'onbeforeprint',\n            iepp._beforePrint\n          );\n          win.attachEvent(\n            'onafterprint',\n            iepp._afterPrint\n          );\n        })(window, document);\n    }\n    //>>END IEPP\n\n    // Assign private properties to the return object with prefix\n    Modernizr._version      = version;\n\n    // expose these for the plugin API. Look in the source for how to join() them against your input\n    Modernizr._prefixes     = prefixes;\n    Modernizr._domPrefixes  = domPrefixes;\n    \n    // Modernizr.mq tests a given media query, live against the current state of the window\n    // A few important notes:\n    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false\n    //   * A max-width or orientation query will be evaluated against the current state, which may change later.\n    //   * You must specify values. Eg. If you are testing support for the min-width media query use: \n    //       Modernizr.mq('(min-width:0)')\n    // usage:\n    // Modernizr.mq('only screen and (max-width:768)')\n    Modernizr.mq            = testMediaQuery;   \n    \n    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on\n    // Modernizr.hasEvent('gesturestart', elem)\n    Modernizr.hasEvent      = isEventSupported; \n\n    // Modernizr.testProp() investigates whether a given style property is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testProp('pointerEvents')\n    Modernizr.testProp      = function(prop){\n        return testProps([prop]);\n    };        \n\n    // Modernizr.testAllProps() investigates whether a given style property,\n    //   or any of its vendor-prefixed variants, is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testAllProps('boxSizing')    \n    Modernizr.testAllProps  = testPropsAll;     \n\n\n    \n    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards\n    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })\n    Modernizr.testStyles    = injectElementWithStyles; \n\n\n    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input\n    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'\n    \n    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.\n    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:\n    //\n    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');\n    \n    // If you're trying to ascertain which transition end event to bind to, you might do something like...\n    // \n    //     var transEndEventNames = {\n    //       'WebkitTransition' : 'webkitTransitionEnd',\n    //       'MozTransition'    : 'transitionend',\n    //       'OTransition'      : 'oTransitionEnd',\n    //       'msTransition'     : 'msTransitionEnd', // maybe?\n    //       'transition'       : 'transitionEnd'\n    //     },\n    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\n    \n    Modernizr.prefixed      = function(prop){\n      return testPropsAll(prop, 'pfx');\n    };\n\n\n\n    // Remove \"no-js\" class from <html> element, if it exists:\n    docElement.className = docElement.className.replace(/\\bno-js\\b/, '')\n                            \n                            // Add the new classes to the <html> element.\n                            + (enableClasses ? ' js ' + classes.join(' ') : '');\n\n    return Modernizr;\n\n})(this, this.document);\n",
  "name": "idontknow",
  "interpreter": "html",
  "extension": "html",
  "scripts": {
    "headStart": ["<link rel='stylesheet' href='index.css'>"],
    "headEnd": [],
    "bodyStart": [],
    "bodyEnd": []
  }
}